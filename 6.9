  const store = getTransaction('words', 'readwrite');
  for (const w of cloudWords) {
    await idbRequest(store.put({
      id: w.id,                 // UUID z Supabase
      deckId: w.deck_id,
      english: w.english,
      polish: w.polish,
      example_en: w.example_en,
      example_pl: w.example_pl,
      image: w.image,
      interval: 0,
      easeFactor: 2.5,
      nextReview: getToday().toISOString(),
      successCount: 0,
      isLearning: false,
      learnedDate: null
    }));
  }
}



    addWordForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  await waitForDB();
  const bulkInput = document.getElementById('bulk-words-input');
  const text = bulkInput.value.trim();
  const targetDeckId = deckDetailsCurrentId;

  if (!text || !targetDeckId) {
    alert("Error: No target deck selected for adding words.");
    return;
  }

  const lines = text.split('\n').map(l => l.trim()).filter(Boolean);
  const newWords = [];

  for (const line of lines) {
    const parts = line.split(';').map(p => p.trim());
    if (parts.length !== 2 && parts.length !== 4) {
      alert(`Nieprawid≈Çowy format: "${line}". U≈ºyj "ang;pl" albo "ang;pl;przyk≈Çad_en;przyk≈Çad_pl".`);
      return;
    }
    const [english, polish, example_en = '', example_pl = ''] = parts;
    newWords.push({
      deckId: targetDeckId,
      english,
      polish,
      example_en,
      example_pl,
      interval: 0,
      nextReview: getToday().toISOString(),
      easeFactor: 2.5,
      isLearning: false,
      learnedDate: null,
      image: null,
      successCount: 0
    });
  }

  // --- üîå Cloud sync: dodaj do Supabase ---
  const { data: { user } } = await supabaseClient.auth.getUser();
  if (user) {
    const { data: inserted, error } = await supabaseClient
      .from('words')
      .insert(newWords.map(w => ({
        deck_id: targetDeckId,
        user_id: user.id,
        english: w.english,
        polish: w.polish,
        example_en: w.example_en,
        example_pl: w.example_pl,
        image: w.image
      })))
      .select();

    if (error) {
      console.error('Supabase insert error:', error);
    } else {
      // üÜî UUID-y z Supabase, nadpisujemy lokalne
      inserted.forEach((supWord, i) => {
        newWords[i].id = supWord.id;
        newWords[i].deckId = supWord.deck_id;
      });
    }
  }

  // --- üíæ Zapis do IndexedDB (lokalne dzia≈Çanie offline) ---
  if (newWords.length > 0) {
    const transaction = db.transaction('words', 'readwrite');
    const store = transaction.objectStore('words');
    newWords.forEach(word => store.put(word)); // UWAGA: "put" zamiast "add" = mo≈ºna nadpisywaƒá UUID z Supabase
    await new Promise(res => transaction.oncomplete = res);

    bulkInput.value = '';
    closeModal(addWordModal);

    // od≈õwie≈º dane
    await loadWordsForActiveDeck();
    startSession();

    alert(`${newWords.length} words have been added!`);
  }
});
